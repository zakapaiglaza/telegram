"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var api_1 = __importDefault(require("./api"));
var LocalazyService = /** @class */ (function () {
    function LocalazyService(options) {
        Object.defineProperty(this, "projectToken", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "baseUrl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.projectToken = options.projectToken;
        this.baseUrl = options.baseUrl || '';
    }
    /**
     * List projects related to the project token.
    * @see https://localazy.com/docs/api/projects#list-projects
    */
    Object.defineProperty(LocalazyService.prototype, "listProjects", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (options, config) {
            if (options === void 0) { options = {}; }
            if (config === void 0) { config = {}; }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, api_1.default.get({
                            url: "".concat(config.baseUrl || this.baseUrl, "/projects"),
                            projectToken: config.projectToken || this.projectToken,
                            options: options,
                            headers: config.headers,
                        })];
                });
            });
        }
    });
    /**
    * Import content into Localazy.
    * @see https://localazy.com/docs/api/import#import-content-to-a-project
    */
    Object.defineProperty(LocalazyService.prototype, "import", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (options, config) {
            if (config === void 0) { config = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var projectId, payload;
                return __generator(this, function (_a) {
                    projectId = options.projectId, payload = __rest(options, ["projectId"]);
                    return [2 /*return*/, api_1.default.post({
                            url: "".concat(config.baseUrl || this.baseUrl, "/projects/").concat(projectId, "/import"),
                            projectToken: config.projectToken || this.projectToken,
                            options: payload,
                            headers: config.headers,
                        })];
                });
            });
        }
    });
    /**
    * Retrieve list of available file formats and related options.
    * @see https://localazy.com/docs/api/import#list-available-file-types
    */
    Object.defineProperty(LocalazyService.prototype, "listFormats", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (config) {
            if (config === void 0) { config = {}; }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, api_1.default.get({
                            url: "".concat(config.baseUrl || this.baseUrl, "/import/formats"),
                            projectToken: config.projectToken || this.projectToken,
                            headers: config.headers,
                        })];
                });
            });
        }
    });
    /**
    * List Localazy files.
    * @see https://localazy.com/docs/api/files#list-files-in-project
    */
    Object.defineProperty(LocalazyService.prototype, "listFiles", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (options, config) {
            if (config === void 0) { config = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var projectId;
                return __generator(this, function (_a) {
                    projectId = options.projectId;
                    return [2 /*return*/, api_1.default.get({
                            url: "".concat(config.baseUrl || this.baseUrl, "/projects/").concat(projectId, "/files"),
                            projectToken: config.projectToken || this.projectToken,
                            headers: config.headers,
                        })];
                });
            });
        }
    });
    /**
     * Returns the given file contents.
     * @see https://localazy.com/docs/api/files#list-file-content
     */
    Object.defineProperty(LocalazyService.prototype, "getFileContents", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (options, config) {
            if (config === void 0) { config = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var projectId, fileId, lang;
                return __generator(this, function (_a) {
                    projectId = options.projectId, fileId = options.fileId, lang = options.lang;
                    return [2 /*return*/, api_1.default.getBlob({
                            url: "".concat(config.baseUrl || this.baseUrl, "/projects/").concat(projectId, "/files/").concat(fileId, "/download/").concat(lang),
                            projectToken: config.projectToken || this.projectToken,
                            headers: config.headers,
                        })];
                });
            });
        }
    });
    /**
    * Retrieve list of keys for language from file.
    * @see https://localazy.com/docs/api/files#retrieve-a-list-of-keys-and-translations-from-file
    */
    Object.defineProperty(LocalazyService.prototype, "listKeysInFileForLanguage", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (options, config) {
            if (config === void 0) { config = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var projectId, fileId, lang, payload;
                return __generator(this, function (_a) {
                    projectId = options.projectId, fileId = options.fileId, lang = options.lang, payload = __rest(options, ["projectId", "fileId", "lang"]);
                    return [2 /*return*/, api_1.default.get({
                            url: "".concat(config.baseUrl || this.baseUrl, "/projects/").concat(projectId, "/files/").concat(fileId, "/keys/").concat(lang),
                            projectToken: config.projectToken || this.projectToken,
                            options: payload,
                            headers: config.headers,
                        })];
                });
            });
        }
    });
    /**
     * Retrieve list of webhooks for project.
     * @see https://localazy.com/docs/api/webhooks-api#list-webhooks-configuration
     */
    Object.defineProperty(LocalazyService.prototype, "listWebhooks", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (options, config) {
            if (config === void 0) { config = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var projectId;
                return __generator(this, function (_a) {
                    projectId = options.projectId;
                    return [2 /*return*/, api_1.default.get({
                            url: "".concat(config.baseUrl || this.baseUrl, "/projects/").concat(projectId, "/webhooks"),
                            projectToken: config.projectToken || this.projectToken,
                            headers: config.headers,
                        })];
                });
            });
        }
    });
    /**
     * Store a new webhooks configuration for the project.
     * @see https://localazy.com/docs/api/webhooks-api#update-webhooks-configuration
     */
    Object.defineProperty(LocalazyService.prototype, "postWebhooks", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (options, config) {
            if (config === void 0) { config = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var projectId;
                return __generator(this, function (_a) {
                    projectId = options.projectId;
                    return [2 /*return*/, api_1.default.post({
                            url: "".concat(config.baseUrl || this.baseUrl, "/projects/").concat(projectId, "/webhooks"),
                            projectToken: config.projectToken || this.projectToken,
                            options: options.webhooks,
                            headers: config.headers,
                        })];
                });
            });
        }
    });
    /**
     * Return webhooks secret, can be used to verify webhook body
     * @see https://localazy.com/docs/api/webhooks-api#get-projectsprojectidwebhookssecret
     */
    Object.defineProperty(LocalazyService.prototype, "getWebhooksSecret", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (options, config) {
            if (config === void 0) { config = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var projectId;
                return __generator(this, function (_a) {
                    projectId = options.projectId;
                    return [2 /*return*/, api_1.default.get({
                            url: "".concat(config.baseUrl || this.baseUrl, "/projects/").concat(projectId, "/webhooks/secret"),
                            projectToken: config.projectToken || this.projectToken,
                            headers: config.headers,
                        })];
                });
            });
        }
    });
    /**
     * Retrieve list of screenshots for project.
     * @see https://localazy.com/docs/api/screenshot-management#list-screenshots
     */
    Object.defineProperty(LocalazyService.prototype, "listScreenshots", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (options, config) {
            if (config === void 0) { config = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var projectId;
                return __generator(this, function (_a) {
                    projectId = options.projectId;
                    return [2 /*return*/, api_1.default.get({
                            url: "".concat(config.baseUrl || this.baseUrl, "/projects/").concat(projectId, "/screenshots"),
                            projectToken: config.projectToken || this.projectToken,
                            headers: config.headers,
                        })];
                });
            });
        }
    });
    /**
     * Retrive list of screenshots tags for project.
     * @see https://localazy.com/docs/api/screenshot-management#list-screenshots-tags
     */
    Object.defineProperty(LocalazyService.prototype, "listScreenshotsTags", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (options, config) {
            if (config === void 0) { config = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var projectId;
                return __generator(this, function (_a) {
                    projectId = options.projectId;
                    return [2 /*return*/, api_1.default.get({
                            url: "".concat(config.baseUrl || this.baseUrl, "/projects/").concat(projectId, "/screenshots/tags"),
                            projectToken: config.projectToken || this.projectToken,
                            headers: config.headers,
                        })];
                });
            });
        }
    });
    /**
     * Upload a new screenshot for the project.
     * @see https://localazy.com/docs/api/screenshot-management#create-a-new-screenshot
     */
    Object.defineProperty(LocalazyService.prototype, "postScreenshots", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (options, config) {
            if (config === void 0) { config = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var projectId;
                return __generator(this, function (_a) {
                    projectId = options.projectId;
                    return [2 /*return*/, api_1.default.post({
                            url: "".concat(config.baseUrl || this.baseUrl, "/projects/").concat(projectId, "/screenshots"),
                            projectToken: config.projectToken || this.projectToken,
                            rawData: options.rawScreenshot,
                            headers: config.headers,
                        })];
                });
            });
        }
    });
    /**
     * Change image data of existing screenshot.
     * @see https://localazy.com/docs/api/screenshot-management#update-the-image-of-an-existing-screenshot
     */
    Object.defineProperty(LocalazyService.prototype, "postScreenshot", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (options, config) {
            if (config === void 0) { config = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var projectId, screenshotId;
                return __generator(this, function (_a) {
                    projectId = options.projectId, screenshotId = options.screenshotId;
                    return [2 /*return*/, api_1.default.post({
                            url: "".concat(config.baseUrl || this.baseUrl, "/projects/").concat(projectId, "/screenshots/").concat(screenshotId),
                            projectToken: config.projectToken || this.projectToken,
                            rawData: options.rawScreenshot,
                            headers: config.headers,
                        })];
                });
            });
        }
    });
    /**
     * Change existing screenshot (metadata).
     * @see https://localazy.com/docs/api/screenshot-management#update-an-existing-screenshot
     */
    Object.defineProperty(LocalazyService.prototype, "putScreenshot", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (options, config) {
            if (config === void 0) { config = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var projectId, screenshotId;
                return __generator(this, function (_a) {
                    projectId = options.projectId, screenshotId = options.screenshotId;
                    return [2 /*return*/, api_1.default.put({
                            url: "".concat(config.baseUrl || this.baseUrl, "/projects/").concat(projectId, "/screenshots/").concat(screenshotId),
                            projectToken: config.projectToken || this.projectToken,
                            options: options.screenshot,
                            headers: config.headers,
                        })];
                });
            });
        }
    });
    /**
     * Delete existing screenshot
     * @see https://localazy.com/docs/api/screenshot-management#delete-a-screenshot
     */
    Object.defineProperty(LocalazyService.prototype, "deleteScreenshot", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (options, config) {
            if (config === void 0) { config = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var projectId, screenshotId;
                return __generator(this, function (_a) {
                    projectId = options.projectId, screenshotId = options.screenshotId;
                    return [2 /*return*/, api_1.default.delete({
                            url: "".concat(config.baseUrl || this.baseUrl, "/projects/").concat(projectId, "/screenshots/").concat(screenshotId),
                            projectToken: config.projectToken || this.projectToken,
                            headers: config.headers,
                        })];
                });
            });
        }
    });
    /**
     * Update an existing key
     * @see https://localazy.com/docs/api/source-keys#update-source-key
     */
    Object.defineProperty(LocalazyService.prototype, "updateKey", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (options, config) {
            if (config === void 0) { config = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var projectId, keyId, payload;
                return __generator(this, function (_a) {
                    projectId = options.projectId, keyId = options.keyId, payload = __rest(options, ["projectId", "keyId"]);
                    return [2 /*return*/, api_1.default.put({
                            url: "".concat(config.baseUrl || this.baseUrl, "/projects/").concat(projectId, "/keys/").concat(keyId),
                            projectToken: config.projectToken || this.projectToken,
                            options: payload,
                            headers: config.headers,
                        })];
                });
            });
        }
    });
    /**
     * Delete an existing key
     * @see https://localazy.com/docs/api/source-keys#delete-source-key
     */
    Object.defineProperty(LocalazyService.prototype, "deleteKey", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (options, config) {
            if (config === void 0) { config = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var projectId, keyId;
                return __generator(this, function (_a) {
                    projectId = options.projectId, keyId = options.keyId;
                    return [2 /*return*/, api_1.default.delete({
                            url: "".concat(config.baseUrl || this.baseUrl, "/projects/").concat(projectId, "/keys/").concat(keyId),
                            projectToken: config.projectToken || this.projectToken,
                            headers: config.headers,
                        })];
                });
            });
        }
    });
    return LocalazyService;
}());
function LocalazyServiceFactory(options) {
    return new LocalazyService(options);
}
exports.default = LocalazyServiceFactory;
//# sourceMappingURL=index.js.map