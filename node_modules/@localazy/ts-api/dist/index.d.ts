import Constructor from './models/arguments/constructor';
import CommonConfig from './models/arguments/common-config';
import ListProjects from './models/arguments/list-projects';
import Import from './models/arguments/import';
import ListFiles from './models/arguments/list-files';
import ListKeysInFile from './models/arguments/list-keys-in-file';
import Project from './models/responses/project';
import ImportResult from './models/responses/import-result';
import Format from './models/responses/format';
import FileResult from './models/responses/file-result';
import KeysInFile from './models/responses/keys-in-file';
import ListWebhooks from './models/arguments/list-webhooks';
import ListWebhooksResult from './models/responses/list-webhooks-result';
import PostWebhooks from './models/arguments/post-webhooks';
import PostWebhooksResult from './models/responses/post-webhooks-result';
import ListScreenshots from './models/arguments/list-screenshots';
import ListScreenshotsResult from './models/responses/list-screenshots-result';
import ListScreenshotsTags from './models/arguments/list-screenshots-tags';
import ListScreenshotsTagsResult from './models/responses/list-screenshots-tags-result';
import PostScreenshots from './models/arguments/post-screenshots';
import PostScreenshotsResult from './models/responses/post-screenshots-result';
import PostScreenshot from './models/arguments/post-screenshot';
import PostScreenshotResult from './models/responses/post-screenshot-result';
import PutScreenshot from './models/arguments/put-screenshot';
import PutScreenshotResult from './models/responses/put-screenshot-result';
import DeleteScreenshot from './models/arguments/delete-screenshot';
import DeleteScreenshotResult from './models/responses/delete-screenshot-result';
import GetFileContents from './models/arguments/get-file-contents';
import DeleteKey from './models/arguments/delete-key';
import DeleteKeyResult from './models/responses/delete-key-result';
import UpdateKey from './models/arguments/update-key';
import UpdateKeyResult from './models/responses/update-key-result';
import GetWebhooksSecret from './models/arguments/get-webhooks-secret';
import GetWebhooksSecretResult from './models/responses/get-webhooks-secret-result';
declare class LocalazyService {
    private projectToken;
    private baseUrl;
    constructor(options: Constructor);
    /**
     * List projects related to the project token.
    * @see https://localazy.com/docs/api/projects#list-projects
    */
    listProjects(options?: ListProjects, config?: CommonConfig): Promise<Project[]>;
    /**
    * Import content into Localazy.
    * @see https://localazy.com/docs/api/import#import-content-to-a-project
    */
    import(options: Import, config?: CommonConfig): Promise<ImportResult>;
    /**
    * Retrieve list of available file formats and related options.
    * @see https://localazy.com/docs/api/import#list-available-file-types
    */
    listFormats(config?: CommonConfig): Promise<Format[]>;
    /**
    * List Localazy files.
    * @see https://localazy.com/docs/api/files#list-files-in-project
    */
    listFiles(options: ListFiles, config?: CommonConfig): Promise<FileResult[]>;
    /**
     * Returns the given file contents.
     * @see https://localazy.com/docs/api/files#list-file-content
     */
    getFileContents(options: GetFileContents, config?: CommonConfig): Promise<Blob>;
    /**
    * Retrieve list of keys for language from file.
    * @see https://localazy.com/docs/api/files#retrieve-a-list-of-keys-and-translations-from-file
    */
    listKeysInFileForLanguage(options: ListKeysInFile, config?: CommonConfig): Promise<KeysInFile>;
    /**
     * Retrieve list of webhooks for project.
     * @see https://localazy.com/docs/api/webhooks-api#list-webhooks-configuration
     */
    listWebhooks(options: ListWebhooks, config?: CommonConfig): Promise<ListWebhooksResult>;
    /**
     * Store a new webhooks configuration for the project.
     * @see https://localazy.com/docs/api/webhooks-api#update-webhooks-configuration
     */
    postWebhooks(options: PostWebhooks, config?: CommonConfig): Promise<PostWebhooksResult>;
    /**
     * Return webhooks secret, can be used to verify webhook body
     * @see https://localazy.com/docs/api/webhooks-api#get-projectsprojectidwebhookssecret
     */
    getWebhooksSecret(options: GetWebhooksSecret, config?: CommonConfig): Promise<GetWebhooksSecretResult>;
    /**
     * Retrieve list of screenshots for project.
     * @see https://localazy.com/docs/api/screenshot-management#list-screenshots
     */
    listScreenshots(options: ListScreenshots, config?: CommonConfig): Promise<ListScreenshotsResult>;
    /**
     * Retrive list of screenshots tags for project.
     * @see https://localazy.com/docs/api/screenshot-management#list-screenshots-tags
     */
    listScreenshotsTags(options: ListScreenshotsTags, config?: CommonConfig): Promise<ListScreenshotsTagsResult>;
    /**
     * Upload a new screenshot for the project.
     * @see https://localazy.com/docs/api/screenshot-management#create-a-new-screenshot
     */
    postScreenshots(options: PostScreenshots, config?: CommonConfig): Promise<PostScreenshotsResult>;
    /**
     * Change image data of existing screenshot.
     * @see https://localazy.com/docs/api/screenshot-management#update-the-image-of-an-existing-screenshot
     */
    postScreenshot(options: PostScreenshot, config?: CommonConfig): Promise<PostScreenshotResult>;
    /**
     * Change existing screenshot (metadata).
     * @see https://localazy.com/docs/api/screenshot-management#update-an-existing-screenshot
     */
    putScreenshot(options: PutScreenshot, config?: CommonConfig): Promise<PutScreenshotResult>;
    /**
     * Delete existing screenshot
     * @see https://localazy.com/docs/api/screenshot-management#delete-a-screenshot
     */
    deleteScreenshot(options: DeleteScreenshot, config?: CommonConfig): Promise<DeleteScreenshotResult>;
    /**
     * Update an existing key
     * @see https://localazy.com/docs/api/source-keys#update-source-key
     */
    updateKey(options: UpdateKey, config?: CommonConfig): Promise<UpdateKeyResult>;
    /**
     * Delete an existing key
     * @see https://localazy.com/docs/api/source-keys#delete-source-key
     */
    deleteKey(options: DeleteKey, config?: CommonConfig): Promise<DeleteKeyResult>;
}
export default function LocalazyServiceFactory(options: Constructor): LocalazyService;
export {};
